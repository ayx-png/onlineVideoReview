用户登录
    1. 数据库创建对应的用户表  td_user（MYSQL）

    2. 前台页面  login.html(login.jsp)
        登录页面 JS校验
            登录表单校验
            1. 登录按钮绑定点击事件（dom元素绑定事件，要在其在页面上加载后才能绑定）[ $(decument).ready({} 或 把script标签放在文档最后]
            2. 获取用户名和密码
            3. 判断用户名和密码是否为空
                若为空则在html/jsp页面（span标签赋值）提示并return
            4. 若不为空，则手动绑定表单提交事件（form表单，部署提交按钮）
    3. 后台实现
        登录功能
            思路：
                1. 接收客户端的请求（接收参数：用户名、密码）
                2. 参数的非空判断（防止用户以非表单提交方式登录：url登录?uname=**&password=***）
                    如果参数为空
                        通过消息模型对象返回结果（设置状态、提示信息、回显数据）
                        将消息模型对象设置到request作用域中
                        请求跳转到登录页面
                        return
                3. 通过用户名在数据库中查询用户对象
                4. 判断用户对象是否为空
                    如果为空
                        通过消息模型对象返回返回结果（设置状态、提示信息、回显数据）
                        将消息模型对象设置到request作用域中
                        请求跳转到登录页面
                        return
                5. 将数据库中查询到的用户密码和前端登录传入的密码比较
                    如果不相等
                         通过消息模型对象返回结果（设置状态、提示信息、回显数据）
                    如果相等，表示登录成功

            controller层 （接受数据、响应结果）
                1. 接受客户端的请求（接收参数：用户名、密码）
                2. 调用service层的方法，返回消息模型对象
                3. 判断消息模型状态码
                    如果状态码为失败
                        将消息模型对象将消息模型对象设置到request作用域中
                        请求跳转到登录页面
                    如果状态码是成功
                        将消息模型中的用户信息设置到session作用域中
                        重定向到pre-test.html页面
            service层 （业务逻辑）
                1. 参数的非空判断
                    如果参数为空
                        状态码、提示信息、回显数据设置到消息模型对象中，返回消息模型对象
                2. 调用dao（mapper）层的查询方法，通过用户名查询用户对象
                3. 判断用户对象是否为空
                        如果为空，状态码、提示信息、回显数据设置到消息模型对象中，返回消息模型对象
                4. 判断数据库中查询到的用户密码是否与前端传入的密码是否相同
                    如果不相等，状态码、提示信息、回显数据设置到消息模型对象中，返回消息模型对象
                5. 登陆成功，将成功状态、提示信息、用户对象设置消息模型对象，返回return
            mapper层 （Dao层）
                定义对应的接口

